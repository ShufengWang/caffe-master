#include <vector>

#include "caffe/layer.hpp"
#include "caffe/util/io.hpp"
#include "caffe/util/math_functions.hpp"
#include "caffe/vision_layers.hpp"

namespace caffe {

template <typename Dtype>
void MyL2LossLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
    const vector<Blob<Dtype>*>& top) {
  //LOG(INFO) << "into forward_gpu";
  int count = bottom[0]->count();
  caffe_gpu_sub(
      count,
      bottom[0]->gpu_data(),
      bottom[1]->gpu_data(),
      diff_.mutable_gpu_data());
  
  // Dtype* x = new Dtype[count+2];
  
  //LOG(INFO) << "x molloc done"; 
  caffe_gpu_mul(
	  count,
      diff_.gpu_data(),
	  diff_.gpu_data(),
	  diff_square_.mutable_gpu_data());
  
  Dtype dot;
  caffe_gpu_dot(count, diff_square_.gpu_data(), bottom[2]->gpu_data(), &dot);
  Dtype loss = dot / bottom[0]->num() / Dtype(2);
  top[0]->mutable_cpu_data()[0] = loss;
  
  
}

template <typename Dtype>
void MyL2LossLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
    const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
  for (int i = 0; i < 2; ++i) {
    if (propagate_down[i]) {
      const Dtype sign = (i == 0) ? 1 : -1;
      const Dtype alpha = sign * top[0]->cpu_diff()[0] / bottom[i]->num();
	  
	  // Dtype* weight_diff = new Dtype[bottom[0]->count()+2];
	  caffe_gpu_mul(bottom[2]->count(),
			bottom[2]->gpu_data(),diff_.gpu_data(),diff_square_.mutable_gpu_data());
      caffe_gpu_axpby(
          bottom[i]->count(),              // count
          alpha,                              // alpha
          weight_diff,                   // a
          Dtype(0),                           // beta
          bottom[i]->mutable_gpu_diff());  // b
    }
  }
}


INSTANTIATE_LAYER_GPU_FUNCS(MyL2LossLayer);

}  // namespace caffe
